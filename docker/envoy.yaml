admin:
  access_log_path: /dev/stdout
  address:
    socket_address:
      address: 0.0.0.0
      port_value: 8001
static_resources:
  clusters:
    - name: java-ratelimit
      type: STRICT_DNS
      connect_timeout: 1s
      lb_policy: ROUND_ROBIN
      protocol_selection: USE_CONFIGURED_PROTOCOL
      http2_protocol_options: {}
      load_assignment:
        cluster_name: java-ratelimit
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      #address: host.docker.internal 
                      address: 127.0.0.1 
                      port_value: 8082
    - name: mock
      connect_timeout: 1s
      type: STRICT_DNS
      lb_policy: ROUND_ROBIN
      load_assignment:
        cluster_name: mock
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: host.docker.internal 
                      port_value: 8888
  listeners:
    - name: listener_1
      address:
        socket_address:
          address: 0.0.0.0
          port_value: 8889
      filter_chains:
        - filters:
            - name: envoy.filters.network.http_connection_manager
              typed_config:
                '@type': >-
                  type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                access_log:
                - name: envoy.access_loggers.file
                  typed_config:
                    "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                    path: /dev/stdout
                codec_type: AUTO
                stat_prefix: ingress
                http_filters:
                  - name: envoy.filters.http.set_metadata
                    typed_config:
                      '@type': >-
                        type.googleapis.com/envoy.extensions.filters.http.set_metadata.v3.Config
                      metadata_namespace: envoy.filters.http.ratelimit
                      value:
                        backend.limit.override:
                          unit: MINUTE 
                          requests_per_unit: 3
                  - name: envoy.filters.http.ratelimit
                    typed_config:
                      '@type': >-
                        type.googleapis.com/envoy.extensions.filters.http.ratelimit.v3.RateLimit
                      domain: integration 
                      timeout: 5s
                      request_type: external
                      stage: 0
                      enable_x_ratelimit_headers: DRAFT_VERSION_03
                      rate_limited_as_resource_exhausted: true
                      failure_mode_deny: false
                      rate_limit_service:
                        grpc_service:
                          envoy_grpc:
                            cluster_name: java-ratelimit
                          timeout: 5s
                        transport_api_version: V3
                  - name: envoy.filters.http.router
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
                route_config:
                  name: route
                  virtual_hosts:
                    - name: backend
                      domains:
                        - '*'
                      routes:
                        - match:
                            prefix: /get
                          route:
                            cluster: mock
                            rate_limits:
                              - actions:
                                  - source_cluster: {}
                                  - destination_cluster: {}
                        - match:
                            prefix: /post
                          route:
                            cluster: mock
                            rate_limits:
                              - actions:
                                  - request_headers:
                                      header_name: user
                                      descriptor_key: user
                        - match:
                            prefix: /patch
                          route:
                            cluster: mock
                            rate_limits:
                              actions:
                                - destination_cluster: {}
                                - source_cluster: {}
                                - request_headers:
                                     header_name: "User"
                                     descriptor_key: clive 
                              limit:
                                dynamic_metadata:
                                  metadata_key:
                                    key: envoy.filters.http.ratelimit
                                    path:
                                      - key: backend.limit.override 
